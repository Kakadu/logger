# define macros that creates directiries
mkinstalldirs = $(INSTALL_SCRIPT) -d

SUBDIRS = regression

# type in sources here
SOURCES = pa_log.ml

# CMO - all compiled objects
CMO := $(SOURCES:.ml=.cmo)

# all compiled interfaces
CMI := $(CMO:.cmo=.cmi)
# all compiled native objects (OCaml' runtime)
CMX := $(CMO:.cmo=.cmx)
# all compiled native objects (separated)
OBJ := $(CMO:.cmo=.o)

# compiled library
CMA := $(addsuffix .cma, $(PACKAGE))
# compiled native library (OCaml' runtime)
CMXA := $(addsuffix .cmxa, $(PACKAGE))
# compiled native library (separated)
LIB := $(addsuffix .a, $(PACKAGE))
# executable bytecode
BYTE := $(addsuffix .byte, $(PACKAGE))
# executable native bytecode
NATIVE := $(addsuffix .opt, $(PACKAGE))

# add extra compiled libraries used for linking
#EXTRA_CMA += $(addsuffix .cma, lib1 lib2)
# extra compiled native libraries used for native linking
EXTRA_CMXA := $(EXTRA_CMA:.cma=.cmxa)

# sources for .cma linking
CMO4CMA = $(CMO)
# sources for .cmxa linking
CMX4CMXA = $(CMO4CMA:.cmo=.cmx)

DOCFILES = $(PACKAGE).ps $(PACKAGE).html

# build target
TARGET := $(CMO) $(CMI)

# OCaml parser call with flags
#P4FLAGS := -pp "$(CAMLP4O) $(PARSER_INCLUDES) pa_log.cmo $(LOG)"
P4FLAGS = -pp "$(CAMLP4R) $(PARSER_INCLUDES)"

# how to run yard
YARD := ocamlrun saved/yard

# bytecode compiling flags
BFLAGS = -w p -I $(OCAMLLIB)/camlp4 $(MODULE_INCLUDES) $(P4FLAGS) $(DEBUG)
# native (optimized) compiling flags
OFLAGS = -w p $(MODULE_INCLUDES) $(P4FLAGS) 

# extra .cmi to delete those are generated from .ml
#CLEAN_CMI := $(CMO:.cmo=.cmi)
# other extra files to clean up
CLEAN_EXTRA := .depend doc wiki

# default build:
# - update timestamp
# - build default target
# - build bytecode and optimized native code
all-am: update-revision $(TARGET)

# how to build documentation
doc: $(CMO)
	mkdir -p doc
	rm -f doc/*
	$(OCAMLDOC) -pp "camlp4r pr_o.cmo" $(MODULE_INCLUDES) $(P4FLAGS) -d doc -html -I +camlp4 *.ml

wiki: $(CMO)
	mkdir -p wiki
	rm -f wiki/*
	$(OCAMLDOC) -pp "camlp4r pr_o.cmo" $(MODULE_INCLUDES) $(P4FLAGS) -d wiki -g odoc_wiki.cmo -I +camlp4 *.ml

wc:
	ocamlwc -p *.mli *.ml

# default clean
clean-am:
	rm -fR $(CMO) $(CMI) $(CLEAN_CMI) $(CLEAN_EXTRA)

# manual install
install-data-am: $(TARGET)
	$(mkinstalldirs) $(CAMLP4LIB); \
	for i in $(TARGET); do \
	    $(INSTALL_DATA) $$i $(CAMLP4LIB)/$$i; \
	done

# manual uninstall
uninstall-am:
	for i in $(TARGET); do \
	    rm -f $(CAMLP4LIB)/$$i; \
	done

# clean up docs in distclean mode
distclean-am:
	rm -fR doc

# cleanup autogenerated scripts in maintainer-clean mode
maintainer-clean-generic:
	rm -rf $(top_srcdir)/autom4te.cache $(CLEAN_EXTRA)

# what is byte-code target
byte-code: $(BYTE)

# how to build bytecode target
$(BYTE): $(CMO)
	$(OCAMLC) $(BFLAGS) -o $@ $(EXTRA_CMA) $(CMO)

# what is native-code target
native-code: $(NATIVE)

# how to build native code target
$(NATIVE): $(CMX)
	$(OCAMLOPT) $(OFLAGS) -o $@ $(EXTRA_CMXA) $(CMX)

# shorter acronims
bc: byte-code
nc: native-code

# how to build library
$(CMA): $(CMO4CMA)
	$(OCAMLC) -a -o $@ $(CMO4CMA)

# how to build native optimized library
$(CMXA): $(CMX4CMXA)
	$(OCAMLOPT) -a -o $@ $(CMX4CMXA)

# every build updates timestamp, so following commit
# will increase revision
update-revision: VERSION
	@umask 022; \
	tmp_version=`mktemp VERSION.XXXXXX`; \
	revision=`grep "\\$$Revision:" VERSION | sed -e 's,^\\$$,,' -e 's, \\$$$$,,'`; \
	date=`LC_TIME=C date`; \
	echo "\$$$$revision \$$" > $$tmp_version; \
	echo "Modify date: $$date" >> $$tmp_version; \
	cat $$tmp_version > VERSION; \
	rm -f $$tmp_version;

# resolve compiling dependencies
#.depend: $(SOURCES)
#	ocamldep *.mli *.ml > .depend

-include .depend

# generic rules
###############
%.cmi: %.mli
	$(OCAMLC) -c $(BFLAGS) $<

# Note: cmi <- mli should go first
%.cmi: %.ml
	$(OCAMLC) -c $(BFLAGS) $<

%.cmo: %.ml
	$(OCAMLC) -c $(BFLAGS) $<

%.o: %.ml
	$(OCAMLOPT) -c $(OFLAGS) $<

%.cmx: %.ml
	$(OCAMLOPT) -c $(OFLAGS) $<

%.ml: %.mll
	$(OCAMLLEX) $<

%.ml: %.mly
	$(OCAMLYACC) -v $<

%.mli: %.mly
	$(OCAMLYACC) -v $<

%.dvi: %.tex
	latex $< && latex $<

%.ps: %.dvi
	dvips $< -o $@ 

%.html: %.tex
	hevea $<

# make .tex from .ml
$(NAME).tex: $(SOURCES)
	$(OCAMLWEB) -o $@ $^

# yard scripts
%TokenKind.ml %.ml: %.yrd
	$(YARD) $< -o $* -gen combi -nums
